package com.aiassistant.ui.fragments;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.aiassistant.R;
import com.aiassistant.adapters.TasksAdapter;
import com.aiassistant.core.TaskSchedulerManager;
import com.aiassistant.models.ScheduledTask;
import com.aiassistant.ui.dialogs.NewTaskDialog;
import com.google.android.material.floatingactionbutton.FloatingActionButton;

import java.util.ArrayList;
import java.util.List;

/**
 * Tasks Fragment
 * Displays and manages scheduled tasks
 */
public class TasksFragment extends Fragment implements NewTaskDialog.TaskCreationListener {
    private RecyclerView recyclerTasks;
    private TasksAdapter tasksAdapter;
    private FloatingActionButton fabAddTask;
    private TextView textNoTasks;
    private Button buttonClearTasks;
    
    private TaskSchedulerManager taskManager;
    private List<ScheduledTask> scheduledTasks = new ArrayList<>();
    
    @Nullable
    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_tasks, container, false);
    }
    
    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        
        // Initialize task manager
        taskManager = TaskSchedulerManager.getInstance(requireContext());
        
        // Initialize views
        initializeViews(view);
        
        // Set up recycler view
        setupRecyclerView();
        
        // Set up button listeners
        setupButtonListeners();
        
        // Load tasks
        loadTasks();
    }
    
    private void initializeViews(View view) {
        recyclerTasks = view.findViewById(R.id.recycler_tasks);
        fabAddTask = view.findViewById(R.id.fab_add_task);
        textNoTasks = view.findViewById(R.id.text_no_tasks);
        buttonClearTasks = view.findViewById(R.id.button_clear_tasks);
    }
    
    private void setupRecyclerView() {
        recyclerTasks.setLayoutManager(new LinearLayoutManager(requireContext()));
        tasksAdapter = new TasksAdapter(scheduledTasks, taskManager);
        recyclerTasks.setAdapter(tasksAdapter);
        
        // Set up item click listener
        tasksAdapter.setOnTaskClickListener((task, position) -> {
            // Open task details/edit dialog
            showEditTaskDialog(task);
        });
        
        // Set up task toggle listener
        tasksAdapter.setOnTaskToggleListener((task, isEnabled, position) -> {
            task.setEnabled(isEnabled);
            taskManager.updateTask(task);
        });
    }
    
    private void setupButtonListeners() {
        // Add task button
        fabAddTask.setOnClickListener(v -> {
            showNewTaskDialog();
        });
        
        // Clear tasks button
        buttonClearTasks.setOnClickListener(v -> {
            clearAllTasks();
        });
    }
    
    private void showNewTaskDialog() {
        NewTaskDialog dialog = new NewTaskDialog();
        dialog.setTaskCreationListener(this);
        dialog.show(getChildFragmentManager(), "NewTaskDialog");
    }
    
    private void showEditTaskDialog(ScheduledTask task) {
        // In a real implementation, open a dialog to edit the task
        // For now, we'll just toggle the task status
        task.setEnabled(!task.isEnabled());
        taskManager.updateTask(task);
        tasksAdapter.notifyDataSetChanged();
    }
    
    @Override
    public void onTaskCreated(ScheduledTask task) {
        // Add the new task to the list
        scheduledTasks.add(task);
        tasksAdapter.notifyDataSetChanged();
        
        // Save the task via the manager
        taskManager.addTask(task);
        
        // Update the empty state
        updateEmptyState();
    }
    
    private void clearAllTasks() {
        // Clear all tasks
        taskManager.clearAllTasks();
        
        // Update the UI
        scheduledTasks.clear();
        tasksAdapter.notifyDataSetChanged();
        
        // Update the empty state
        updateEmptyState();
    }
    
    private void loadTasks() {
        // Load tasks from the manager
        List<ScheduledTask> tasks = taskManager.getAllTasks();
        
        // Update the list
        scheduledTasks.clear();
        if (tasks != null) {
            scheduledTasks.addAll(tasks);
        }
        
        // Update the adapter
        tasksAdapter.notifyDataSetChanged();
        
        // Update the empty state
        updateEmptyState();
    }
    
    private void updateEmptyState() {
        if (scheduledTasks.isEmpty()) {
            textNoTasks.setVisibility(View.VISIBLE);
            buttonClearTasks.setVisibility(View.GONE);
        } else {
            textNoTasks.setVisibility(View.GONE);
            buttonClearTasks.setVisibility(View.VISIBLE);
        }
    }
    
    @Override
    public void onResume() {
        super.onResume();
        loadTasks();
    }
}