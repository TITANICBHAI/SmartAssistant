package android.content;

import java.util.HashMap;
import java.util.Map;
import java.util.Set;

/**
 * Mock implementation of Android SharedPreferences for testing environment.
 */
public class SharedPreferences {
    private Map<String, Object> preferences = new HashMap<>();
    
    /**
     * Get a string value
     */
    public String getString(String key, String defValue) {
        Object value = preferences.get(key);
        return (value instanceof String) ? (String) value : defValue;
    }
    
    /**
     * Get an int value
     */
    public int getInt(String key, int defValue) {
        Object value = preferences.get(key);
        return (value instanceof Integer) ? (Integer) value : defValue;
    }
    
    /**
     * Get a boolean value
     */
    public boolean getBoolean(String key, boolean defValue) {
        Object value = preferences.get(key);
        return (value instanceof Boolean) ? (Boolean) value : defValue;
    }
    
    /**
     * Get a long value
     */
    public long getLong(String key, long defValue) {
        Object value = preferences.get(key);
        return (value instanceof Long) ? (Long) value : defValue;
    }
    
    /**
     * Get a float value
     */
    public float getFloat(String key, float defValue) {
        Object value = preferences.get(key);
        return (value instanceof Float) ? (Float) value : defValue;
    }
    
    /**
     * Get a string set
     */
    public Set<String> getStringSet(String key, Set<String> defValues) {
        Object value = preferences.get(key);
        return (value instanceof Set) ? (Set<String>) value : defValues;
    }
    
    /**
     * Check if a key exists
     */
    public boolean contains(String key) {
        return preferences.containsKey(key);
    }
    
    /**
     * Get editor for making changes
     */
    public Editor edit() {
        return new Editor();
    }
    
    /**
     * Register a change listener
     */
    public void registerOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
        // Mock implementation
    }
    
    /**
     * Unregister a change listener
     */
    public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeListener listener) {
        // Mock implementation
    }
    
    /**
     * Interface for preference change listeners
     */
    public interface OnSharedPreferenceChangeListener {
        void onSharedPreferenceChanged(SharedPreferences prefs, String key);
    }
    
    /**
     * Editor for making changes to preferences
     */
    public class Editor {
        public Editor putString(String key, String value) {
            preferences.put(key, value);
            return this;
        }
        
        public Editor putInt(String key, int value) {
            preferences.put(key, value);
            return this;
        }
        
        public Editor putBoolean(String key, boolean value) {
            preferences.put(key, value);
            return this;
        }
        
        public Editor putLong(String key, long value) {
            preferences.put(key, value);
            return this;
        }
        
        public Editor putFloat(String key, float value) {
            preferences.put(key, value);
            return this;
        }
        
        public Editor putStringSet(String key, Set<String> values) {
            preferences.put(key, values);
            return this;
        }
        
        public Editor remove(String key) {
            preferences.remove(key);
            return this;
        }
        
        public Editor clear() {
            preferences.clear();
            return this;
        }
        
        public boolean commit() {
            return true;
        }
        
        public void apply() {
            // No-op in mock
        }
    }
}