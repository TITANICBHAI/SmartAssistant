package utils;

import java.util.Map;

/**
 * Interface for UI elements for cross-platform compatibility
 */
public interface UIElement {
    /**
     * Get the element's ID
     * @return The element ID
     */
    String getId();
    
    /**
     * Set the element's ID
     * @param id The element ID
     */
    void setId(String id);
    
    /**
     * Get the element's text content
     * @return The text content
     */
    String getText();
    
    /**
     * Set the element's text content
     * @param text The text content
     */
    void setText(String text);
    
    /**
     * Get the element's bounding rectangle
     * @return The bounding rectangle
     */
    Object getBounds();
    
    /**
     * Set the element's bounding rectangle
     * @param bounds The new bounding rectangle
     */
    void setBounds(Object bounds);
    
    /**
     * Set the element's bounding rectangle using coordinates
     * @param x The X coordinate
     * @param y The Y coordinate
     * @param width The width
     * @param height The height
     */
    void setBounds(int x, int y, int width, int height);
    
    /**
     * Set the element's bounding rectangle using float coordinates
     * @param x The X coordinate
     * @param y The Y coordinate
     * @param width The width
     * @param height The height
     */
    void setBounds(float x, float y, float width, float height);
    
    /**
     * Get the element's type
     * @return The element type as a string
     */
    String getType();
    
    /**
     * Set the element's type
     * @param type The element type
     */
    void setType(String type);
    
    /**
     * Get the parent element
     * @return The parent element
     */
    UIElement getParent();
    
    /**
     * Set the parent element
     * @param parent The parent element
     */
    void setParent(UIElement parent);
    
    /**
     * Get all child elements
     * @return Array of child elements
     */
    UIElement[] getChildren();
    
    /**
     * Set all child elements
     * @param children Array of child elements
     */
    void setChildren(UIElement[] children);
    
    /**
     * Add a child element
     * @param child The child element to add
     */
    void addChild(UIElement child);
    
    /**
     * Remove a child element
     * @param child The child element to remove
     * @return True if the child was removed, false otherwise
     */
    boolean removeChild(UIElement child);
    
    /**
     * Get all attributes as a map
     * @return The attributes map
     */
    Map<String, Object> getAttributes();
    
    /**
     * Set all attributes
     * @param attributes The attributes map
     */
    void setAttributes(Map<String, Object> attributes);
    
    /**
     * Get an attribute value
     * @param name The attribute name
     * @return The attribute value or null if not found
     */
    Object getAttribute(String name);
    
    /**
     * Set an attribute value
     * @param name The attribute name
     * @param value The attribute value
     */
    void setAttribute(String name, Object value);
    
    /**
     * Check if the element is visible
     * @return True if visible, false otherwise
     */
    boolean isVisible();
    
    /**
     * Set whether the element is visible
     * @param visible The visible state
     */
    void setVisible(boolean visible);
    
    /**
     * Check if the element is clickable
     * @return True if clickable, false otherwise
     */
    boolean isClickable();
    
    /**
     * Set whether the element is clickable
     * @param clickable The clickable state
     */
    void setClickable(boolean clickable);
    
    /**
     * Get the confidence level for this element (e.g., from AI recognition)
     * @return The confidence level (0.0 to 1.0)
     */
    float getConfidence();
    
    /**
     * Set the confidence level for this element
     * @param confidence The confidence level (0.0 to 1.0)
     */
    void setConfidence(float confidence);
    
    /**
     * Get the center X coordinate
     * @return The center X coordinate
     */
    int getCenterX();
    
    /**
     * Get the center Y coordinate
     * @return The center Y coordinate
     */
    int getCenterY();
    
    /**
     * Check if this element contains the specified point
     * @param x The X coordinate
     * @param y The Y coordinate
     * @return True if the element contains the point, false otherwise
     */
    boolean containsPoint(int x, int y);
    
    /**
     * Check if this element intersects with another element
     * @param element The other element
     * @return True if they intersect, false otherwise
     */
    boolean intersects(UIElement element);
}