package com.aiassistant.ui;

import android.content.Intent;
import android.net.Uri;
import android.os.Bundle;
import android.provider.Settings;
import android.view.MenuItem;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.fragment.app.Fragment;

import com.aiassistant.R;
import com.aiassistant.core.AIController;
import com.aiassistant.core.SecurityBypassManager;
import com.aiassistant.models.AIState;
import com.aiassistant.services.AIService;
import com.aiassistant.ui.fragments.AIFragment;
import com.aiassistant.ui.fragments.HomeFragment;
import com.aiassistant.ui.fragments.LearningFragment;
import com.aiassistant.ui.fragments.SettingsFragment;
import com.aiassistant.ui.fragments.TasksFragment;
import com.google.android.material.bottomnavigation.BottomNavigationView;

public class MainActivity extends AppCompatActivity implements BottomNavigationView.OnNavigationItemSelectedListener {
    private BottomNavigationView bottomNavigationView;
    
    private AIController aiController;
    private SecurityBypassManager securityManager;
    
    // Fragment instances
    private HomeFragment homeFragment;
    private AIFragment aiFragment;
    private LearningFragment learningFragment;
    private TasksFragment tasksFragment;
    private SettingsFragment settingsFragment;
    
    private Fragment activeFragment;
    
    // Request codes
    private static final int REQUEST_ACCESSIBILITY = 1001;
    private static final int REQUEST_VIDEO_PICKER = 1002;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        // Initialize controllers
        aiController = AIController.getInstance(this);
        securityManager = SecurityBypassManager.getInstance(this);
        
        // Initialize UI
        initializeUI();
        
        // Create fragments if they don't exist
        if (savedInstanceState == null) {
            initializeFragments();
        }
        
        // Start AI service
        startAIService();
        
        // Check permissions and show welcome dialog
        checkPermissionsAndShowWelcome();
    }
    
    private void initializeUI() {
        bottomNavigationView = findViewById(R.id.bottom_navigation);
        bottomNavigationView.setOnNavigationItemSelectedListener(this);
    }
    
    private void initializeFragments() {
        homeFragment = new HomeFragment();
        aiFragment = new AIFragment();
        learningFragment = new LearningFragment();
        tasksFragment = new TasksFragment();
        settingsFragment = new SettingsFragment();
        
        // Start with home fragment
        getSupportFragmentManager().beginTransaction()
                .add(R.id.fragment_container, homeFragment, "home")
                .commit();
        activeFragment = homeFragment;
    }
    
    private void startAIService() {
        Intent serviceIntent = new Intent(this, AIService.class);
        startService(serviceIntent);
    }
    
    private void checkPermissionsAndShowWelcome() {
        AIState aiState = aiController.getAIState();
        
        // Check if this is first launch
        if (!aiState.isFirstLaunchCompleted()) {
            showWelcomeDialog();
            aiState.setFirstLaunchCompleted(true);
        }
        
        // Check accessibility service
        if (!aiState.isAccessibilityEnabled()) {
            showAccessibilityDialog();
        }
    }
    
    private void showWelcomeDialog() {
        new AlertDialog.Builder(this)
                .setTitle("Welcome to AI Assistant")
                .setMessage("This app uses advanced AI to help automate tasks on your device. " +
                        "You'll need to grant several permissions for full functionality.")
                .setPositiveButton("Get Started", (dialog, which) -> {
                    // Navigate to settings
                    bottomNavigationView.setSelectedItemId(R.id.navigation_settings);
                })
                .setNegativeButton("Later", null)
                .show();
    }
    
    private void showAccessibilityDialog() {
        new AlertDialog.Builder(this)
                .setTitle("Accessibility Service Required")
                .setMessage("This app requires Accessibility Service to function properly. " +
                        "Please enable it in Settings.")
                .setPositiveButton("Open Settings", (dialog, which) -> {
                    openAccessibilitySettings();
                })
                .setNegativeButton("Later", null)
                .show();
    }
    
    private void openAccessibilitySettings() {
        Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
        startActivityForResult(intent, REQUEST_ACCESSIBILITY);
    }
    
    @Override
    public boolean onNavigationItemSelected(@NonNull MenuItem item) {
        Fragment fragment = null;
        String tag = "";
        
        // Select the appropriate fragment
        int itemId = item.getItemId();
        if (itemId == R.id.navigation_home) {
            fragment = homeFragment;
            tag = "home";
        } else if (itemId == R.id.navigation_ai) {
            fragment = aiFragment;
            tag = "ai";
        } else if (itemId == R.id.navigation_learning) {
            fragment = learningFragment;
            tag = "learning";
        } else if (itemId == R.id.navigation_task_scheduler) {
            fragment = tasksFragment;
            tag = "tasks";
        } else if (itemId == R.id.navigation_settings) {
            fragment = settingsFragment;
            tag = "settings";
        }
        
        // Switch to the selected fragment
        if (fragment != null) {
            switchFragment(fragment, tag);
            return true;
        }
        
        return false;
    }
    
    private void switchFragment(Fragment fragment, String tag) {
        // Don't switch if it's the same fragment
        if (fragment == activeFragment) {
            return;
        }
        
        // Check if the fragment is already added
        Fragment existingFragment = getSupportFragmentManager().findFragmentByTag(tag);
        
        if (existingFragment == null) {
            // Add the fragment if it doesn't exist
            getSupportFragmentManager().beginTransaction()
                    .add(R.id.fragment_container, fragment, tag)
                    .hide(activeFragment)
                    .show(fragment)
                    .commit();
        } else {
            // Show the existing fragment
            getSupportFragmentManager().beginTransaction()
                    .hide(activeFragment)
                    .show(existingFragment)
                    .commit();
            fragment = existingFragment;
        }
        
        activeFragment = fragment;
    }
    
    /**
     * Open the video picker for selecting videos to learn from
     */
    public void openVideoPicker() {
        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
        intent.setType("video/*");
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        
        try {
            startActivityForResult(Intent.createChooser(intent, "Select a Video"), REQUEST_VIDEO_PICKER);
        } catch (android.content.ActivityNotFoundException ex) {
            Toast.makeText(this, "No file manager found", Toast.LENGTH_SHORT).show();
        }
    }
    
    /**
     * Get the bottom navigation view for use by fragments
     */
    public BottomNavigationView getBottomNavigationView() {
        return bottomNavigationView;
    }
    
    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        
        switch (requestCode) {
            case REQUEST_ACCESSIBILITY:
                // Check if accessibility service is now enabled
                AIState aiState = aiController.getAIState();
                boolean accessibilityEnabled = aiController.checkAccessibilityServiceEnabled();
                aiState.setAccessibilityEnabled(accessibilityEnabled);
                
                if (accessibilityEnabled) {
                    Toast.makeText(this, "Accessibility service enabled", Toast.LENGTH_SHORT).show();
                } else {
                    Toast.makeText(this, "Accessibility service not enabled", Toast.LENGTH_SHORT).show();
                }
                break;
                
            case REQUEST_VIDEO_PICKER:
                if (resultCode == RESULT_OK && data != null) {
                    Uri videoUri = data.getData();
                    
                    // Pass the selected video to the learning fragment
                    if (learningFragment != null) {
                        learningFragment.processSelectedVideo(videoUri);
                        
                        // Switch to learning fragment if not already there
                        if (activeFragment != learningFragment) {
                            bottomNavigationView.setSelectedItemId(R.id.navigation_learning);
                        }
                    }
                }
                break;
        }
    }
    
    @Override
    protected void onResume() {
        super.onResume();
        
        // Update UI of the active fragment
        if (activeFragment instanceof HomeFragment) {
            ((HomeFragment) activeFragment).updateServiceStatus();
        } else if (activeFragment instanceof AIFragment) {
            ((AIFragment) activeFragment).updateAIState();
        }
    }
    
    @Override
    protected void onDestroy() {
        super.onDestroy();
        
        // Note: We don't stop the AI service on destroy, as it should continue
        // running in the background for automation tasks
    }
}